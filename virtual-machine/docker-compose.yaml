services:
  redis:
    image: redis:latest
    restart: unless-stopped
    container_name: redis-instance
    ports:
      - "6379:6379"
    command: ["redis-server", "/etc/redis/redis.conf", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    networks:
      - argland-network
    env_file:
      - .env

#  postgres:
#    image: postgis/postgis:16-3.4    
#    restart: unless-stopped
#    container_name: postgres-server
#    ports:
#      - "5432:5432"
#    volumes:
#      - pgdata:/var/lib/postgresql/data
#      - ./postgres/backup:/backup
#      - ./postgres/docker-entrypoint.sh:/docker-entrypoint-initdb.d/init.sh
#    networks:
#      - argland-network
#    env_file:
#      - .env

  minio:
    image: quay.io/minio/minio:latest
    restart: unless-stopped
    container_name: minio-storage
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # MinIO API Port
      - "9001:9001"  # MinIO Console Port
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    networks:
      - argland-network
    env_file:
      - .env

  minio-create-buckets:
    image: minio/mc
    restart: unless-stopped
    container_name: minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
      mc mb myminio/${MINIO_BUCKET_NAME};
      mc policy set public myminio/${MINIO_BUCKET_NAME};
      exit 0;
      "
    networks:
      - argland-network
    env_file:
      - .env

  celery:
    build:
      context: ./celery/
      dockerfile: Dockerfile
    image: fast-api-arg-land:latest
    restart: unless-stopped
    container_name: celery-app
    depends_on:
      - redis
      - minio
    networks:
      - argland-network
    env_file:
      - .env


  flower:
    image: mher/flower
    restart: unless-stopped
    container_name: flower-monitor
    env_file: 
      - .env
    command: >
      celery 
      --broker=$CELERY_BROKER_URL 
      --result-backend=$CELERY_RESULT_BACKEND
      flower 
      --port=5555 
      --persistent=True
      --db=/data/flower.db
    volumes:
      - flower-data:/data
    ports:
      - "5555:5555"
    depends_on:
      - celery
    networks:
      - argland-network


  fastapi:
    build:
      context: ./fast-api/
      dockerfile: Dockerfile
    image: celery-arg-land:latest
    restart: unless-stopped
    container_name: fastapi-app
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    networks:
      - argland-network
    depends_on:
      - celery
    env_file:
      - .env

volumes:
  redis-data:
    driver: local
#  pgdata:
#    driver: local
  flower-data:
    driver: local
  minio-data:
    driver: local


networks:
  argland-network:
    external: true
